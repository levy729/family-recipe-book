#!/usr/bin/env sh

# Source utility functions
. "$(dirname "$0")/../scripts/hook-utils.sh"

# Initialize hook utilities
init_hook_utils

echo "ðŸš€ Starting pre-commit checks..."

# --- FORMAT CODE FIRST ---
print_phase_start "Formatting" "Main Project"
run_command_with_error_handling "npm run format" "Auto-formatting main project" "format" "Main Project"
print_phase_success "Formatting" "Main Project"

print_phase_start "Formatting" "Recipe Builder"
cd recipe-builder
run_command_with_error_handling "npm run format" "Auto-formatting recipe builder" "format" "Recipe Builder"
cd ..
print_phase_success "Formatting" "Recipe Builder"
# --- END FORMAT CODE FIRST ---

# Phase 1: Lint-staged processing
set_phase "Lint-staged Processing"
set_project "Main Project"
print_progress "Running lint-staged for staged files..."
npx lint-staged
print_success "Lint-staged completed successfully"

# Phase 2: Main project validation
set_phase "Main Project Validation"
set_project "Main Project"

# Check if there are staged files in the main project
if has_staged_files "." ".*"; then
    print_progress "Validating staged files in main project..."
    print_info "Staged files summary: $(get_staged_files_summary '.')"
    
    # TypeScript type checking for staged files
    if needs_typescript_validation "."; then
        if check_typescript_config "." "tsconfig.json"; then
            run_typescript_check "." "tsconfig.json"
        fi
    fi
    
    # Recipe validation for staged .md files
    if needs_recipe_validation "."; then
        run_recipe_validation "."
    fi
    
    # Style validation for staged CSS files
    if needs_style_validation "."; then
        print_progress "Validating staged style files..."
        # TODO: Add style validation here if needed
        print_success "Style validation passed"
    fi
    
    # Config validation for staged config files
    if needs_config_validation "."; then
        print_progress "Validating staged config files..."
        # TODO: Add config validation here if needed
        print_success "Config validation passed"
    fi
    
    # Security audit for dependencies
    print_progress "Running security audit..."
    npm audit --audit-level=moderate
    if [ $? -ne 0 ]; then
        print_error "Security audit failed! Please fix vulnerabilities before committing."
        exit 1
    fi
    print_success "Security audit passed"
else
    print_info "No staged files in main project to validate"
fi

# Phase 3: Recipe builder validation
set_phase "Recipe Builder Validation"
set_project "Recipe Builder"

# Check if there are staged files in recipe-builder
if has_staged_files "recipe-builder" ".*"; then
    print_progress "Validating staged files in recipe-builder project..."
    print_info "Staged files summary: $(get_staged_files_summary 'recipe-builder')"
    
    # Navigate to recipe-builder directory
    cd recipe-builder
    
    # Run lint-staged for recipe builder
    print_progress "Running lint-staged for recipe builder staged files..."
    npx lint-staged
    print_success "Recipe builder lint-staged completed successfully"
    
    # TypeScript type checking for staged files
    if needs_typescript_validation "."; then
        if check_typescript_config "." "tsconfig.json"; then
            run_typescript_check "." "tsconfig.json"
        fi
    fi
    
    # Run tests for recipe-builder (always run if there are any staged files)
    print_progress "Running recipe builder tests..."
    npm test
    print_success "Recipe builder tests passed"
    
    # Recipe Builder Runtime Verification
    print_progress "Verifying recipe builder runtime functionality..."
    
    # Check if dependencies are properly installed
    print_progress "Checking recipe builder dependencies..."
    if [ ! -d "node_modules" ]; then
        print_error "Recipe builder node_modules not found. Run 'npm install' in recipe-builder directory."
        exit 1
    fi
    print_success "Recipe builder dependencies verified"
    
    # Test build process
    print_progress "Testing recipe builder build process..."
    npm run build
    if [ $? -ne 0 ]; then
        print_error "Recipe builder build failed! Please fix build issues before committing."
        exit 1
    fi
    print_success "Recipe builder build process verified"
    
    # Quick test of recipe parsing functionality
    print_progress "Testing recipe parsing functionality..."
    if [ -f "lib/recipe-parser.ts" ]; then
        # Test if the parser can be compiled
        npx tsc --noEmit lib/recipe-parser.ts
        if [ $? -ne 0 ]; then
            print_error "Recipe parser compilation failed! Please fix parser issues before committing."
            exit 1
        fi
        print_success "Recipe parser functionality verified"
    else
        print_warning "Recipe parser file not found, skipping parser validation"
    fi
    
    # Quick startup test to verify the application can start
    print_progress "Testing recipe builder startup..."
    
    # Security audit for recipe-builder dependencies
    print_progress "Running security audit for recipe-builder..."
    npm audit --audit-level=moderate
    if [ $? -ne 0 ]; then
        print_error "Recipe builder security audit failed! Please fix vulnerabilities before committing."
        exit 1
    fi
    print_success "Recipe builder security audit passed"
    
    # Kill any existing process on port 3002 to avoid conflicts
    lsof -ti:3002 | xargs kill -9 2>/dev/null || true
    
    # Test if the application can start without errors
    npm start > /dev/null 2>&1 &
    START_PID=$!
    
    # Wait a few seconds for the server to start
    sleep 3
    
    # Check if the process is still running
    if kill -0 $START_PID 2>/dev/null; then
        print_success "Recipe builder startup test passed"
        # Kill the background process
        kill $START_PID 2>/dev/null
        wait $START_PID 2>/dev/null
    else
        print_error "Recipe builder startup failed! Please check for startup issues."
        exit 1
    fi
    
    # Return to original directory
    cd ..
else
    print_info "No staged files in recipe-builder project to validate"
fi

# Phase 4: Cross-project validation
set_phase "Cross-Project Validation"
set_project "Both Projects"

print_progress "Running cross-project validation..."
# TODO: Add cross-project validation script call here
print_success "Cross-project validation passed"

print_success "ðŸŽ‰ All pre-commit checks passed successfully!"
